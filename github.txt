<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>لعبة معركة الأبطال</title>
  <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@600&display=swap" rel="stylesheet">
  <style>
    /* الإبقاء على الأنماط الأصلية كما هي */
    * { box-sizing: border-box; }
    body {
      margin: 0;
      font-family: 'Cairo', sans-serif;
      background: linear-gradient(135deg, #1a1a2e, #2e2e4e);
      color: white;
      text-align: center;
      padding: 20px;
    }
    h1 {
      font-size: 2.8em;
      color: #ff9933;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
      margin-bottom: 20px;
    }
    #gameContainer {
      max-width: 900px;
      margin: 0 auto;
      background: linear-gradient(45deg, #2c2c4c, #1a1a3e);
      border-radius: 20px;
      box-shadow: 0 0 40px rgba(106, 27, 154, 0.3);
      padding: 30px;
      border: 1px solid #ce93d8;
    }
    .player-names {
      display: flex;
      align-items: center;
      gap: 20px;
      margin: 30px 0;
    }
    .player-name {
      width: 220px;
      padding: 15px;
      border-radius: 10px;
      background: rgba(0, 0, 0, 0.3);
      border: 2px solid #ff9933;
      color: white;
      font-size: 1.2em;
      transition: 0.3s;
    }
    .player-name:focus {
      border-color: #ffcc00;
      box-shadow: 0 0 10px rgba(255, 204, 0, 0.5);
      outline: none;
    }
    .vs-text {
      color: #ff3333;
      font-size: 3em;
      margin: 0 30px;
      text-shadow: 0 0 20px rgba(255, 51, 51, 0.7);
      animation: vsGlow 2s infinite;
    }
    .controls {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 10px;
      margin: 30px 0;
    }
    .control-button {
      background: linear-gradient(145deg, #7e57c2, #4527a0);
      padding: 12px 25px;
      border: 1px solid #ce93d8;
      border-radius: 25px;
      color: white;
      font-size: 16px;
      font-weight: bold;
      cursor: pointer;
      box-shadow: 0 4px 8px rgba(126, 87, 194, 0.3);
      transition: 0.3s;
      position: relative;
      overflow: hidden;
      min-width: 150px;
    }
    .control-button:before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(45deg, transparent, rgba(255,255,255,0.2));
      transform: rotate(45deg);
      transition: 0.3s;
    }
    .control-button:hover {
      transform: translateY(-3px);
      box-shadow: 0 6px 15px rgba(126, 87, 194, 0.5);
    }
    .control-button:hover:before {
      animation: buttonGlow 1.5s infinite;
    }
    .control-button:active {
      transform: translateY(1px);
    }
    .start-button {
      background: linear-gradient(45deg, #7e57c2, #4527a0);
      padding: 15px 40px;
      font-size: 1.3em;
      box-shadow: 0 4px 15px rgba(69, 39, 160, 0.4);
    }
    .slider-container {
      width: 320px;
      margin: 25px auto;
      text-align: right;
      background: rgba(0,0,0,0.2);
      padding: 15px;
      border-radius: 10px;
      border: 1px solid #ce93d8;
    }
    .slider-container label {
      display: block;
      margin-bottom: 10px;
      color: #ffcc00;
      font-size: 1.1em;
    }
    input[type="range"] {
      width: 100%;
      height: 10px;
      -webkit-appearance: none;
      background: #444;
      border-radius: 5px;
    }
    input[type="range"]::-webkit-slider-thumb {
      -webkit-appearance: none;
      width: 20px;
      height: 20px;
      background: #7e57c2;
      border-radius: 50%;
      cursor: pointer;
      box-shadow: 0 0 5px rgba(126,87,194,0.8);
    }
    #gameArea {
      position: relative;
      width: 500px;
      height: 500px;
      margin: 20px auto;
      border: 3px solid #ce93d8;
      border-radius: 15px;
      background: linear-gradient(160deg, #333, #222);
      box-shadow: 0 0 30px rgba(106, 27, 154, 0.3);
      overflow: hidden;
    }
    #gameArea:after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: 
        repeating-linear-gradient(
          0deg,
          transparent,
          transparent 49px,
          rgba(106,27,154,0.1) 49px,
          rgba(106,27,154,0.1) 50px
        ),
        repeating-linear-gradient(
          90deg,
          transparent,
          transparent 49px,
          rgba(106,27,154,0.1) 49px,
          rgba(106,27,154,0.1) 50px
        );
      pointer-events: none;
    }
    .player {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      position: absolute;
      overflow: hidden;
      border: 3px solid #bbdefb;
      box-shadow: 0 0 20px rgba(106, 27, 154, 0.5);
      transition: 0.3s;
      z-index: 10;
    }
    .player:hover {
      transform: scale(1.05);
      box-shadow: 0 0 30px rgba(171, 71, 188, 0.7);
    }
    .player img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    #saw {
      width: 60px;
      height: 60px;
      background: linear-gradient(45deg, #ab47bc, #6a1b9a);
      border-radius: 15px;
      position: absolute;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 30px;
      animation: spin 1s infinite linear;
      box-shadow: 0 0 15px rgba(171,71,188,0.7);
      z-index: 5;
    }
    #heart {
      width: 50px;
      height: 50px;
      color: #f50057;
      position: absolute;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 30px;
      animation: pulse 1.5s infinite;
      text-shadow: 0 0 15px rgba(245,0,87,0.8);
      z-index: 5;
    }
    .health-container {
      display: flex;
      justify-content: space-around;
      margin: 30px 0;
    }
    .health-wrapper {
      width: 45%;
      background: rgba(0,0,0,0.3);
      padding: 15px;
      border-radius: 10px;
      border: 1px solid #ce93d8;
    }
    .player-name-display {
      color: #ffcc00;
      font-size: 1.4em;
      margin-bottom: 10px;
      text-shadow: 1px 1px 3px rgba(0,0,0,0.5);
    }
    .health-bar {
      display: flex;
      gap: 5px;
      justify-content: center;
    }
    .health-segment {
      width: 35px;
      height: 25px;
      border-radius: 5px;
      position: relative;
      overflow: hidden;
      box-shadow: 0 0 8px rgba(0,0,0,0.5);
    }
    .health-segment.live:before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(45deg, #00e676, #00c853);
      box-shadow: inset 0 0 10px rgba(0,230,118,0.7);
      animation: healthPulse 2s infinite;
    }
    .health-segment.dead:before {
      background: linear-gradient(45deg, #444, #333);
    }
    #timerContainer {
      background: linear-gradient(45deg, #3f51b5, #3949ab);
      width: 300px;
      margin: 30px auto;
      padding: 15px;
      border-radius: 10px;
      border: 1px solid #9fa8da;
    }
    #timerDisplay {
      color: #ffcc00;
      font-size: 1.8em;
      margin-top: 10px;
      font-family: 'Courier New', monospace;
      letter-spacing: 2px;
    }
    @keyframes spin { 100% { transform: rotate(360deg); } }
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.3); }
      100% { transform: scale(1); }
    }
    @keyframes vsGlow {
      0%, 100% { text-shadow: 0 0 20px rgba(255,51,51,0.7); }
      50% { text-shadow: 0 0 30px rgba(255,0,0,0.9); }
    }
    @keyframes buttonGlow {
      0% { left: -50%; }
      100% { left: 150%; }
    }
    @keyframes healthPulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.7; }
    }
    @keyframes hitShake {
      0% { transform: translate(0); }
      25% { transform: translate(5px, 5px); }
      50% { transform: translate(-5px, -5px); }
      75% { transform: translate(3px, 3px); }
      100% { transform: translate(0); }
    }
    @keyframes sawGlow {
      0%, 100% { filter: brightness(1); box-shadow: 0 0 20px rgba(255, 51, 0, 0.7); }
      50% { filter: brightness(1.3); box-shadow: 0 0 30px rgba(255, 0, 0, 0.9); }
    }
    @keyframes itemGlow {
      0% { transform: scale(1.0); }
      50% { transform: scale(1.1); }
      100% { transform: scale(1.0); }
    }
    @keyframes healthIncrease {
      0% { transform: scale(1.2); }
      100% { transform: scale(1.0); }
    }
    .player.hit {
      animation: hitShake 0.3s linear;
    }
    .player.has-saw {
      box-shadow: 0 0 30px rgba(255, 51, 0, 0.7);
      animation: sawGlow 1s infinite;
    }
    .winner-effect {
      animation: winnerPulse 0.5s infinite;
    }
    @keyframes winnerPulse {
      0%, 100% { transform: scale(1); box-shadow: 0 0 30px rgba(255, 215, 0, 0.7); }
      50% { transform: scale(1.1); box-shadow: 0 0 50px rgba(255, 215, 0, 0.9); }
    }
    .confetti {
      position: absolute;
      width: 10px;
      height: 10px;
      background-color: #f00;
      opacity: 0;
      z-index: 100;
      animation: confettiFall 5s linear forwards;
    }
    @keyframes confettiFall {
      0% { transform: translateY(-100px) rotate(0deg); opacity: 1; }
      100% { transform: translateY(600px) rotate(360deg); opacity: 0; }
    }
    /* تحسينات جديدة */
    .player {
      transition: transform 0.2s, box-shadow 0.3s;
    }
    .item-glow {
      animation: itemGlow 1.5s infinite;
    }
    .health-increase {
      animation: healthIncrease 0.5s;
    }
  </style>
</head>
<body>
  <div id="gameContainer">
    <h1>⚔️ معركة الأبطال ⚔️</h1>
    <!-- حقول أسماء اللاعبين -->
    <div class="player-names">
      <input type="text" id="player1Name" class="player-name" placeholder="اسم البطل الأول">
      <span class="vs-text">VS</span>
      <input type="text" id="player2Name" class="player-name" placeholder="اسم البطل الثاني">
    </div>
    <!-- أزرار التحكم -->
    <div class="controls">
      <input type="file" id="player1ImgInput" accept="image/*" hidden>
      <input type="file" id="player2ImgInput" accept="image/*" hidden>
      <button class="control-button" onclick="document.getElementById('player1ImgInput').click()">📸 صورة اللاعب 1</button>
      <button class="control-button" onclick="document.getElementById('player2ImgInput').click()">📸 صورة اللاعب 2</button>
      <button class="control-button start-button" onclick="startGame()">🔥 ابدأ اللعب 🔥</button>
      <button class="control-button" id="pauseResumeBtn" onclick="togglePauseResume()">⏸️ إيقاف مؤقت</button>
      <button class="control-button" onclick="restartRound()">🔄 إعادة الجولة</button>
    </div>
    <!-- مؤشر الوقت -->
    <div id="timerContainer" class="health-container">
      <div class="health-wrapper">
        <div class="player-name-display">⏳ الوقت</div>
        <div id="timerDisplay">00:00</div>
      </div>
    </div>
    <!-- زر إظهار/إخفاء المؤقت -->
    <button class="control-button" onclick="toggleTimer()" style="margin-top: 15px;">
      🕒 إخفاء المؤقت
    </button>
    <!-- شريط السرعة -->
    <div class="slider-container">
      <label>السرعة: <span id="speedValue">5</span></label>
      <input type="range" id="speedSlider" min="1" max="10" value="5">
    </div>
    <!-- شريط وقت القلب -->
    <div class="slider-container">
      <label>وقت ظهور القلب: <span id="heartTimeValue">5</span> ثوانٍ</label>
      <input type="range" id="heartTimeSlider" min="1" max="10" value="5">
    </div>
    <!-- شريط وقت المنشار -->
    <div class="slider-container">
      <label>وقت ظهور المنشار: <span id="sawTimeValue">5</span> ثوانٍ</label>
      <input type="range" id="sawTimeSlider" min="1" max="10" value="5">
    </div>
    <!-- أشرطة الصحة -->
    <div class="health-container">
      <div class="health-wrapper">
        <div class="player-name-display" id="nameP1">اللاعب 1</div>
        <div class="health-bar" id="healthP1"></div>
      </div>
      <div class="health-wrapper">
        <div class="player-name-display" id="nameP2">اللاعب 2</div>
        <div class="health-bar" id="healthP2"></div>
      </div>
    </div>
    <!-- منطقة اللعبة -->
    <div id="gameArea">
      <div id="player1" class="player">
        <img src="https://via.placeholder.com/80x80/ff4444/ffffff?text=P1">
      </div>
      <div id="player2" class="player">
        <img src="https://via.placeholder.com/80x80/4444ff/ffffff?text=P2">
      </div>
      <div id="saw" class="item item-glow">🪚</div>
      <div id="heart" class="item item-glow">❤️</div>
    </div>
  </div>
  <script>
    // عناصر اللعبة
    const player1 = document.getElementById('player1');
    const player2 = document.getElementById('player2');
    const saw = document.getElementById('saw');
    const heart = document.getElementById('heart');
    const healthP1 = document.getElementById('healthP1');
    const healthP2 = document.getElementById('healthP2');
    const nameP1 = document.getElementById('nameP1');
    const nameP2 = document.getElementById('nameP2');
    const gameArea = document.getElementById('gameArea');
    // أشرطة التحكم
    const speedSlider = document.getElementById('speedSlider');
    const heartTimeSlider = document.getElementById('heartTimeSlider');
    const sawTimeSlider = document.getElementById('sawTimeSlider');
    const speedValue = document.getElementById('speedValue');
    const heartTimeValue = document.getElementById('heartTimeValue');
    const sawTimeValue = document.getElementById('sawTimeValue');
    // متغيرات اللعبة
    let gameSize = 500;
    let baseSpeed = parseInt(speedSlider.value);
    let heartRespawnTime = parseInt(heartTimeSlider.value);
    let sawRespawnTime = parseInt(sawTimeSlider.value);
    let p1, p2;
    let animationFrame;
    let heartTimeout;
    let sawTimeout;
    let timerInterval = null;
    let gameStarted = false;
    let isPaused = false;
    let startTime, pausedTime = 0;

    // تحديث السرعة
    speedSlider.addEventListener('input', () => {
      baseSpeed = parseInt(speedSlider.value);
      speedValue.textContent = baseSpeed;
      if (gameStarted) {
        p1.vx = p1.vx > 0 ? baseSpeed : -baseSpeed;
        p1.vy = p1.vy > 0 ? baseSpeed : -baseSpeed;
        p2.vx = p2.vx > 0 ? baseSpeed : -baseSpeed;
        p2.vy = p2.vy > 0 ? baseSpeed : -baseSpeed;
      }
    });

    // تحديث وقت القلب
    heartTimeSlider.addEventListener('input', () => {
      heartRespawnTime = parseInt(heartTimeSlider.value);
      heartTimeValue.textContent = heartRespawnTime;
    });

    // تحديث وقت المنشار
    sawTimeSlider.addEventListener('input', () => {
      sawRespawnTime = parseInt(sawTimeSlider.value);
      sawTimeValue.textContent = sawRespawnTime;
    });

    // بدء اللعبة
    function startGame() {
      if (gameStarted) return restartRound();
      gameStarted = true;
      resetGame();
      // جلب الأسماء
      nameP1.textContent = document.getElementById('player1Name').value || 'اللاعب 1';
      nameP2.textContent = document.getElementById('player2Name').value || 'اللاعب 2';
      // تهيئة اللاعبين بمواقع عشوائية
      p1 = createPlayer(80);
      p2 = createPlayer(80, p1);
      // إظهار العناصر
      heart.style.display = 'block';
      saw.style.display = 'block';
      moveSaw(true);
      moveHeart(true);
      updateHealth();
      // بدء المؤقت
      startTime = Date.now();
      timerInterval = setInterval(updateTimer, 1000);
      // بدء حلقة اللعبة
      loop();
    }

    // إعادة ضبط اللعبة
    function resetGame() {
      cancelAnimationFrame(animationFrame);
      clearTimeout(heartTimeout);
      clearTimeout(sawTimeout);
      clearInterval(timerInterval);
      isPaused = false;
      pausedTime = 0;
      document.getElementById('pauseResumeBtn').textContent = '⏸️ إيقاف مؤقت';
      player1.classList.remove('has-saw', 'hit', 'winner-effect');
      player2.classList.remove('has-saw', 'hit', 'winner-effect');
    }

    // إنشاء لاعب مع مواقع عشوائية
    function createPlayer(size, otherPlayer) {
      const pos = getRandomPosition(size, otherPlayer);
      return {
        x: pos.x,
        y: pos.y,
        vx: baseSpeed * (Math.random() > 0.5 ? 1 : -1),
        vy: baseSpeed * (Math.random() > 0.5 ? 1 : -1),
        health: 5,
        hasSaw: false,
        size: size,
        element: document.getElementById(`player${size === 80 ? 1 : 2}`)
      };
    }

    // مواقع عشوائية مع تجنب التداخل
    function getRandomPosition(size, otherPlayer) {
      let x, y;
      do {
        x = Math.random() * (gameSize - size);
        y = Math.random() * (gameSize - size);
      } while(otherPlayer && 
              Math.hypot(x - otherPlayer.x, y - otherPlayer.y) < 150);
      return {x, y};
    }

    // حلقة اللعبة
    function loop() {
      if (!gameStarted || isPaused) return;
      movePlayers();
      checkCollisions();
      updateHealth();
      checkGameOver();
      animationFrame = requestAnimationFrame(loop);
    }

    // تحريك اللاعبين
    function movePlayers() {
      [p1, p2].forEach(p => movePlayer(p));
    }

    // دالة تحريك اللاعب
    function movePlayer(p) {
      // تطبيق الاحتكاك
      p.vx *= 0.98;
      p.vy *= 0.98;
      // تغيير الاتجاه عند الحوادث
      if (p.x <= 0 || p.x >= gameSize - p.size) p.vx *= -1;
      if (p.y <= 0 || p.y >= gameSize - p.size) p.vy *= -1;
      // تحديث المواقع
      p.x += p.vx;
      p.y += p.vy;
      // تقييد الحركة ضمن المنطقة
      p.x = Math.max(0, Math.min(gameSize - p.size, p.x));
      p.y = Math.max(0, Math.min(gameSize - p.size, p.y));
      // تحديث العنصر
      placeElement(p.element, p.x, p.y);
    }

    // التحقق من التصادمات
    function checkCollisions() {
      checkPlayerCollision();
      checkItemCollision(p1, saw);
      checkItemCollision(p2, saw);
      checkHeartCollision(p1);
      checkHeartCollision(p2);
    }

    // تصادم اللاعبين (تعديل الحركة والقوة)
    function checkPlayerCollision() {
      const dx = p1.x - p2.x;
      const dy = p1.y - p2.y;
      const distance = Math.hypot(dx, dy);

      if (distance < 80) { // إذا كانت المسافة أقل من 80 (حجم اللاعبين)
        const angle = Math.atan2(dy, dx); // حساب الزاوية بين اللاعبين

        // حساب القوة بناءً على السرعة الحالية لكل لاعب
        const forceP1 = Math.sqrt(p1.vx * p1.vx + p1.vy * p1.vy) * 0.5; // قوة اللاعب الأول
        const forceP2 = Math.sqrt(p2.vx * p2.vx + p2.vy * p2.vy) * 0.5; // قوة اللاعب الثاني

        // تطبيق القوة على كل لاعب بشكل عكسي
        p1.vx = -Math.cos(angle) * forceP2;
        p1.vy = -Math.sin(angle) * forceP2;

        p2.vx = Math.cos(angle) * forceP1;
        p2.vy = Math.sin(angle) * forceP1;

        // إضافة تأثير الارتداد
        player1.classList.add('hit');
        player2.classList.add('hit');

        setTimeout(() => {
          player1.classList.remove('hit');
          player2.classList.remove('hit');
        }, 300);
      }
    }

    // تصادم المنشار
    function checkItemCollision(player, item) {
      if (isColliding(player, item)) {
        player.hasSaw = true;
        player.element.classList.add('has-saw');
        moveSaw();
      }
    }

    // تصادم القلب
    function checkHeartCollision(player) {
      if (isColliding(player, heart) && heart.style.display !== 'none') {
        player.health = Math.min(5, player.health + 1);
        player.element.classList.add('health-increase');
        setTimeout(() => {
          player.element.classList.remove('health-increase');
        }, 500);
        heart.style.display = 'none';
        heartTimeout = setTimeout(() => {
          moveHeart();
          heart.style.display = 'block';
        }, heartRespawnTime * 1000);
      }
    }

    // التحقق من التصادم
    function isColliding(player, item) {
      const playerRect = {
        x: player.x,
        y: player.y,
        width: player.size,
        height: player.size
      };
      const itemRect = {
        x: item.offsetLeft,
        y: item.offsetTop,
        width: item.offsetWidth,
        height: item.offsetHeight
      };
      return !(
        playerRect.x + playerRect.width < itemRect.x ||
        playerRect.x > itemRect.x + itemRect.width ||
        playerRect.y + playerRect.height < itemRect.y ||
        playerRect.y > itemRect.y + itemRect.height
      );
    }

    // تحريك المنشار
    function moveSaw(initial) {
      let valid = false;
      while (!valid) {
        const newX = Math.random() * (gameSize - saw.offsetWidth);
        const newY = Math.random() * (gameSize - saw.offsetHeight);
        const distP1 = Math.hypot(newX - p1.x, newY - p1.y);
        const distP2 = Math.hypot(newX - p2.x, newY - p2.y);
        const safeDistance = initial ? 200 : 100;
        valid = (distP1 > safeDistance && distP2 > safeDistance);
        placeElement(saw, newX, newY);
      }
      saw.classList.add('item-glow');
    }

    // تحريك القلب
    function moveHeart(initial) {
      let valid = false;
      while (!valid) {
        const newX = Math.random() * (gameSize - heart.offsetWidth);
        const newY = Math.random() * (gameSize - heart.offsetHeight);
        const distP1 = Math.hypot(newX - p1.x, newY - p1.y);
        const distP2 = Math.hypot(newX - p2.x, newY - p2.y);
        const safeDistance = initial ? 150 : 80;
        valid = (distP1 > safeDistance && distP2 > safeDistance);
        placeElement(heart, newX, newY);
      }
      heart.classList.add('item-glow');
    }

    // تحديث الصحة
    function updateHealth() {
      healthP1.innerHTML = '';
      healthP2.innerHTML = '';
      for (let i = 0; i < 5; i++) {
        const createSegment = (health) => {
          const seg = document.createElement('div');
          seg.className = `health-segment ${i < health ? 'live' : 'dead'}`;
          return seg;
        };
        healthP1.appendChild(createSegment(p1.health));
        healthP2.appendChild(createSegment(p2.health));
      }
    }

    // التحقق من نهاية اللعبة
    function checkGameOver() {
      if (p1.health <= 0 || p2.health <= 0) {
        endGame();
      }
    }

    // إنهاء اللعبة
    function endGame() {
      clearInterval(timerInterval);
      cancelAnimationFrame(animationFrame);
      const winner = p1.health > 0 ? player1 : player2;
      const winnerName = p1.health > 0 ? nameP1.textContent : nameP2.textContent;
      winner.classList.add('winner-effect');
      createConfetti();
      setTimeout(() => {
        alert(`🎉 ${winnerName} فاز بالمعركة!`);
        winner.classList.remove('winner-effect');
      }, 500);
    }

    // إنشاء تأثير الكونفيتي
    function createConfetti() {
      const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff'];
      for (let i = 0; i < 100; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        confetti.style.left = Math.random() * gameSize + 'px';
        confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
        confetti.style.animationDuration = (Math.random() * 3 + 2) + 's';
        gameArea.appendChild(confetti);
        setTimeout(() => {
          confetti.remove();
        }, 5000);
      }
    }

    // دالة التوقف المؤقت
    function togglePauseResume() {
      if (!gameStarted) return;
      if (isPaused) {
        startTime = Date.now() - pausedTime;
        timerInterval = setInterval(updateTimer, 1000);
        animationFrame = requestAnimationFrame(loop);
        document.getElementById('pauseResumeBtn').textContent = '⏸️ إيقاف مؤقت';
      } else {
        pausedTime = Date.now() - startTime;
        clearInterval(timerInterval);
        cancelAnimationFrame(animationFrame);
        document.getElementById('pauseResumeBtn').textContent = '▶️ استئناف';
      }
      isPaused = !isPaused;
    }

    // دالة إعادة الجولة
    function restartRound() {
      gameStarted = false;
      resetGame();
      startGame();
    }

    // دالة تحديث المؤقت
    function updateTimer() {
      if (!startTime) return;
      const elapsed = Date.now() - startTime;
      const minutes = Math.floor(elapsed / 60000);
      const seconds = Math.floor((elapsed % 60000) / 1000);
      document.getElementById('timerDisplay').textContent = 
        `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    }

    // دالة إظهار/إخفاء المؤقت
    function toggleTimer() {
      const timer = document.getElementById('timerContainer');
      const button = document.querySelector('button[onclick="toggleTimer()"]');
      timer.style.display = timer.style.display === 'none' ? 'block' : 'none';
      button.textContent = timer.style.display === 'none' ? '⏳ إظهار المؤقت' : '⏸️ إخفاء المؤقت';
    }

    // تحميل الصور
    document.getElementById('player1ImgInput').addEventListener('change', e => {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = () => player1.querySelector('img').src = reader.result;
        reader.readAsDataURL(file);
      }
    });
    document.getElementById('player2ImgInput').addEventListener('change', e => {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = () => player2.querySelector('img').src = reader.result;
        reader.readAsDataURL(file);
      }
    });

    // دالة تحريك العناصر
    function placeElement(el, x, y) {
      el.style.left = x + 'px';
      el.style.top = y + 'px';
    }
  </script>
</body>
</html>